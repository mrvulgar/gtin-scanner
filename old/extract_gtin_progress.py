#!/usr/bin/env python3
"""
–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ GTIN data matrix –∫–æ–¥–æ–≤ –∏–∑ PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º –∏ –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
"""

import sys
import csv
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor, as_completed
import time
from datetime import timedelta

try:
    import fitz  # PyMuPDF
    from pylibdmtx.pylibdmtx import decode
    from PIL import Image
    from tqdm import tqdm
    import io
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    print("pip install PyMuPDF pylibdmtx Pillow tqdm")
    sys.exit(1)


def process_page(pdf_path, page_num, scale=3.0):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É PDF —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
    
    Args:
        pdf_path: –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        page_num: –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        scale: –º–∞—Å—à—Ç–∞–± –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (3.0 = –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        
    Returns:
        tuple: (page_num, code or None, success)
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º PDF –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        pdf_document = fitz.open(pdf_path)
        page = pdf_document[page_num]
        
        # –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: –º–∞—Å—à—Ç–∞–± 3.0x
        mat = fitz.Matrix(scale, scale)
        pix = page.get_pixmap(matrix=mat)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
        img_data = pix.tobytes("png")
        image = Image.open(io.BytesIO(img_data))
        
        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º data matrix –∫–æ–¥—ã
        decoded_objects = decode(image)
        
        pdf_document.close()
        
        if decoded_objects:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ–¥
            try:
                code_data = decoded_objects[0].data.decode('utf-8')
                return (page_num, code_data, True)
            except UnicodeDecodeError:
                code_data = decoded_objects[0].data.decode('latin-1')
                return (page_num, code_data, True)
        
        return (page_num, None, False)
        
    except Exception as e:
        return (page_num, None, False)


def extract_datamatrix_from_pdf_parallel(pdf_path, output_csv_path, max_workers=8, scale=3.0):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç data matrix –∫–æ–¥—ã –∏–∑ PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º
    
    Args:
        pdf_path: –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        output_csv_path: –ø—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É
        max_workers: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤
        scale: –º–∞—Å—à—Ç–∞–± —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–±–æ–ª—å—à–µ = –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    """
    print("\n" + "="*70)
    print(f"üìÑ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï GTIN DATA MATRIX –ö–û–î–û–í –ò–ó PDF")
    print("="*70)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    pdf_document = fitz.open(pdf_path)
    total_pages = len(pdf_document)
    pdf_document.close()
    
    print(f"\nüìã –§–∞–π–ª: {pdf_path}")
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages:,}")
    print(f"üîß –ü–æ—Ç–æ–∫–æ–≤: {max_workers}")
    print(f"üé® –ö–∞—á–µ—Å—Ç–≤–æ: {scale}x (–≤—ã—Å–æ–∫–æ–µ)")
    print(f"\n‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...\n")
    
    start_time = time.time()
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤ (page_num: code)
    codes_dict = {}
    found = 0
    errors = 0
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
    with tqdm(total=total_pages, 
              desc="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
              unit="—Å—Ç—Ä",
              bar_format='{desc}: {percentage:3.0f}%|{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]',
              colour='green',
              ncols=100) as pbar:
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        with ThreadPoolExecutor(max_workers=max_workers) as executor:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
            futures = {
                executor.submit(process_page, pdf_path, page_num, scale): page_num
                for page_num in range(total_pages)
            }
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for future in as_completed(futures):
                page_num, code, success = future.result()
                
                if success and code:
                    codes_dict[page_num] = code
                    found += 1
                elif not success:
                    errors += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                pbar.set_postfix({
                    '–Ω–∞–π–¥–µ–Ω–æ': found,
                    '–æ—à–∏–±–æ–∫': errors
                })
                pbar.update(1)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–¥—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    all_codes = [codes_dict[i] for i in sorted(codes_dict.keys())]
    
    elapsed_time = time.time() - start_time
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*70)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*70)
    print(f"‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages:,}")
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {found:,}")
    print(f"‚úó –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {total_pages - found:,}")
    if errors > 0:
        print(f"‚ö† –û—à–∏–±–æ–∫: {errors}")
    print(f"‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {timedelta(seconds=int(elapsed_time))}")
    print(f"üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: {total_pages/elapsed_time:.1f} —Å—Ç—Ä–∞–Ω–∏—Ü/—Å–µ–∫")
    print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {(found/total_pages*100):.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    if all_codes:
        with open(output_csv_path, 'w', newline='', encoding='utf-8') as csvfile:
            writer = csv.writer(csvfile, quoting=csv.QUOTE_MINIMAL)
            for code in all_codes:
                writer.writerow([code])
        
        print(f"\nüíæ –ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_csv_path}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –ø–µ—Ä–≤—ã—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–¥–æ–≤
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–æ–≤:")
        print(f"   –ü–µ—Ä–≤—ã–π: {all_codes[0]}")
        if len(all_codes) > 1:
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π: {all_codes[-1]}")
    else:
        print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    
    print("="*70 + "\n")
    
    return all_codes


if __name__ == "__main__":
    pdf_file = "gose.pdf"
    output_file = f"{Path(pdf_file).stem}_extracted.csv"
    
    if not Path(pdf_file).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {pdf_file}")
        sys.exit(1)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
    NUM_WORKERS = 8   # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 12-16)
    SCALE = 3.0       # –ú–∞—Å—à—Ç–∞–±: 3.0 = –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
    
    codes = extract_datamatrix_from_pdf_parallel(
        pdf_file, 
        output_file, 
        max_workers=NUM_WORKERS,
        scale=SCALE
    )
    
    if codes:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(codes)} GTIN –∫–æ–¥–æ–≤!")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥—ã")
        sys.exit(1)

