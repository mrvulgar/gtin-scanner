#!/usr/bin/env python3
"""
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è GTIN data matrix –∫–æ–¥–æ–≤ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
"""

import sys
import csv
import io
import time
from pathlib import Path
from typing import Optional, Tuple

try:
    import gradio as gr
    import fitz  # PyMuPDF
    from pylibdmtx.pylibdmtx import decode
    from PIL import Image, ImageDraw
    import numpy as np
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    print("pip install gradio PyMuPDF pylibdmtx Pillow")
    sys.exit(1)


class GTINScanner:
    def __init__(self):
        self.pdf_document = None
        self.pdf_path = None
        self.crop_rect = None
        self.stop_requested = False
        
    def load_pdf_preview(self, pdf_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏"""
        if pdf_file is None:
            return None, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
        
        try:
            self.pdf_path = pdf_file.name
            self.pdf_document = fitz.open(self.pdf_path)
            page = self.pdf_document[0]
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            img_data = pix.tobytes("png")
            image = Image.open(io.BytesIO(img_data))
            
            total_pages = len(self.pdf_document)
            message = f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {Path(self.pdf_path).name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n\nüëÜ –í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã—à–µ"
            
            # –î–ª—è AnnotatedImage –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–æ—Ä—Ç–µ–∂ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, None)
            return (image, None), message
            
        except Exception as e:
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}"
    
    def process_crop_selection(self, image_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        if image_data is None:
            return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ image_data - —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏)
        if isinstance(image_data, tuple) and len(image_data) >= 2:
            annotations = image_data[1]
            
            if annotations and len(annotations) > 0:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
                box = annotations[0]
                x1, y1 = int(box['xmin']), int(box['ymin'])
                x2, y2 = int(box['xmax']), int(box['ymax'])
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞ 2.0
                self.crop_rect = (x1, y1, x2, y2)
                
                width = x2 - x1
                height = y2 - y1
                
                return f"‚úÖ –û–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {width}x{height} px\n\n‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'"
        
        return "‚ö†Ô∏è –í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è"
    
    def scan_pdf(self, progress=gr.Progress()):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
        if self.pdf_document is None:
            yield "‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
            return
        
        if self.crop_rect is None:
            yield "‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", None, "–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º"
            return
        
        all_codes = []
        total_pages = len(self.pdf_document)
        self.stop_requested = False
        
        try:
            progress(0, desc="–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            for page_num in range(total_pages):
                if self.stop_requested:
                    status = f"‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}/{total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}"
                    yield status, None, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {page_num} –∏–∑ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü"
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress_value = (page_num + 1) / total_pages
                progress(progress_value, desc=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{total_pages}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = self.pdf_document[page_num]
                
                # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–º –∂–µ –º–∞—Å—à—Ç–∞–±–æ–º
                mat = fitz.Matrix(2.5, 2.5)
                pix = page.get_pixmap(matrix=mat)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                img_data = pix.tobytes("png")
                image = Image.open(io.BytesIO(img_data))
                
                # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞)
                scale = 2.5 / 2.0  # —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–µ–≤—å—é
                crop_x1 = int(self.crop_rect[0] * scale)
                crop_y1 = int(self.crop_rect[1] * scale)
                crop_x2 = int(self.crop_rect[2] * scale)
                crop_y2 = int(self.crop_rect[3] * scale)
                
                cropped_image = image.crop((crop_x1, crop_y1, crop_x2, crop_y2))
                
                # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º data matrix –∫–æ–¥—ã
                decoded_objects = decode(cropped_image)
                
                for obj in decoded_objects:
                    try:
                        code_data = obj.data.decode('utf-8')
                        all_codes.append(code_data)
                    except UnicodeDecodeError:
                        code_data = obj.data.decode('latin-1')
                        all_codes.append(code_data)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                status = f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {page_num + 1}/{total_pages} ({progress_value*100:.1f}%)\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}"
                stats = f"–°—Ç—Ä–∞–Ω–∏—Ü: {page_num + 1}/{total_pages} | –ö–æ–¥–æ–≤: {len(all_codes)}"
                
                yield status, None, stats
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
            if all_codes and not self.stop_requested:
                csv_content = self._generate_csv(all_codes)
                output_filename = f"{Path(self.pdf_path).stem}_extracted.csv"
                
                final_status = f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}\nüíæ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é"
                final_stats = f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {total_pages}/{total_pages} | –ö–æ–¥–æ–≤: {len(all_codes)}"
                
                yield final_status, csv_content, final_stats
            elif not all_codes:
                yield "‚ö†Ô∏è –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏", None, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å"
            
        except Exception as e:
            yield f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", None, "–û—à–∏–±–∫–∞"
    
    def _generate_csv(self, codes):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""
        output = io.StringIO()
        writer = csv.writer(output, quoting=csv.QUOTE_MINIMAL)
        for code in codes:
            writer.writerow([code])
        
        csv_content = output.getvalue()
        output.close()
        
        return csv_content
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stop_requested = True
        return "‚èπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..."


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
scanner = GTINScanner()


# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks(title="GTIN Scanner", theme=gr.themes.Soft()) as app:
    gr.Markdown("""
    # üîç GTIN Scanner - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF
    
    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª** –≤ –ø–æ–ª–µ –Ω–∏–∂–µ
    2. **–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º** –Ω–∞ –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤—ã–¥–µ–ª–µ–Ω–∏—è)
    3. **–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    4. **–°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    """)
    
    with gr.Row():
        with gr.Column(scale=2):
            # –ó–∞–≥—Ä—É–∑–∫–∞ PDF
            pdf_input = gr.File(
                label="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª",
                file_types=[".pdf"],
                type="filepath"
            )
            
            # –ü—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
            preview_image = gr.AnnotatedImage(
                label="üìÑ –ü—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º)",
                height=600
            )
            
            load_status = gr.Textbox(
                label="üìù –°—Ç–∞—Ç—É—Å",
                value="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF...",
                lines=3
            )
        
        with gr.Column(scale=1):
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            gr.Markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            
            crop_btn = gr.Button(
                "‚úÇÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ",
                variant="secondary",
                size="lg"
            )
            
            scan_btn = gr.Button(
                "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                variant="primary",
                size="lg"
            )
            
            stop_btn = gr.Button(
                "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                variant="stop",
                size="lg"
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            gr.Markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            stats_display = gr.Textbox(
                label="–ü—Ä–æ–≥—Ä–µ—Å—Å",
                value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                lines=2
            )
            
            scan_status = gr.Textbox(
                label="–î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                value="",
                lines=5
            )
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            gr.Markdown("### üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç")
            
            csv_output = gr.File(
                label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                visible=True
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    pdf_input.change(
        fn=scanner.load_pdf_preview,
        inputs=[pdf_input],
        outputs=[preview_image, load_status]
    )
    
    crop_btn.click(
        fn=scanner.process_crop_selection,
        inputs=[preview_image],
        outputs=[load_status]
    )
    
    scan_btn.click(
        fn=scanner.scan_pdf,
        outputs=[scan_status, csv_output, stats_display]
    )
    
    stop_btn.click(
        fn=scanner.stop_scan,
        outputs=[scan_status]
    )
    
    gr.Markdown("""
    ---
    **–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ QR –∫–æ–¥—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –≤ –æ–¥–Ω–æ–º –∏ —Ç–æ–º –∂–µ –º–µ—Å—Ç–µ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö PDF.
    """)


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ GTIN Scanner...")
    print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    app.launch(
        server_name="127.0.0.1",
        server_port=7860,
        share=False,
        inbrowser=True
    )

