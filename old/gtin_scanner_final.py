#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
"""

import sys
import csv
import io
import time
import threading
import logging
from pathlib import Path
from typing import Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('gtin_scanner_final.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

try:
    import gradio as gr
    import fitz  # PyMuPDF
    from pylibdmtx.pylibdmtx import decode
    from PIL import Image, ImageDraw, ImageEnhance
    import numpy as np
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    print("pip install gradio PyMuPDF pylibdmtx Pillow")
    sys.exit(1)


class GTINScanner:
    def __init__(self):
        self.pdf_document = None
        self.pdf_path = None
        self.crop_rect = None
        self.stop_requested = False
        self.preview_image = None
        self.selection_start = None
        self.selection_end = None
        self.scanning = False
        self.scan_results = {
            "status": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
            "progress": "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
            "csv_content": None
        }
        
        logger.info("GTINScanner Final –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def load_pdf_preview(self, pdf_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏"""
        logger.info(f"load_pdf_preview –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∞–π–ª–æ–º: {pdf_file}")
        
        if pdf_file is None:
            logger.warning("PDF —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            return None, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
        
        try:
            self.pdf_path = pdf_file.name
            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º PDF: {self.pdf_path}")
            
            self.pdf_document = fitz.open(self.pdf_path)
            page = self.pdf_document[0]
            logger.info(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞: {pix.width}x{pix.height}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            img_data = pix.tobytes("png")
            self.preview_image = Image.open(io.BytesIO(img_data))
            logger.info(f"PIL Image —Å–æ–∑–¥–∞–Ω: {self.preview_image.size}")
            
            total_pages = len(self.pdf_document)
            message = f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {Path(self.pdf_path).name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n\n‚ö†Ô∏è –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã—Ö 10-50 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö\nüñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —Å Data Matrix –∫–æ–¥–æ–º"
            
            logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")
            return self.preview_image, message
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}", exc_info=True)
            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}"
    
    def handle_image_click(self, evt: gr.SelectData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""
        logger.info(f"handle_image_click –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {evt}")
        
        if self.preview_image is None:
            logger.warning("–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
        
        x, y = evt.index[0], evt.index[1]
        logger.info(f"–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({x}, {y})")
        
        if self.selection_start is None:
            # –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.selection_start = (x, y)
            logger.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.selection_start}")
            return f"üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ({x}, {y})\nüñ±Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ"
        else:
            # –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è
            self.selection_end = (x, y)
            logger.info(f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.selection_end}")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
            x1 = min(self.selection_start[0], self.selection_end[0])
            y1 = min(self.selection_start[1], self.selection_end[1])
            x2 = max(self.selection_start[0], self.selection_end[0])
            y2 = max(self.selection_start[1], self.selection_end[1])
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            self.crop_rect = (x1, y1, x2, y2)
            logger.info(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.crop_rect}")
            
            width = x2 - x1
            height = y2 - y1
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
            self.selection_start = None
            self.selection_end = None
            
            result_msg = f"‚úÖ –û–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {width}x{height} px\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x1},{y1}) - ({x2},{y2})\n\n‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'"
            logger.info(f"–û–±–ª–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞: {width}x{height}")
            return result_msg
    
    def scan_pdf_with_progress(self, max_pages=None):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
        logger.info("scan_pdf_with_progress –Ω–∞—á–∞—Ç–æ")
        
        if self.pdf_document is None:
            logger.warning("PDF –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            self.scan_results["status"] = "‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"
            self.scan_results["progress"] = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
            return "‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"
        
        if self.crop_rect is None:
            logger.warning("–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            self.scan_results["status"] = "‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            self.scan_results["progress"] = "–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å Data Matrix –∫–æ–¥–æ–º –∫–ª–∏–∫–æ–º –º—ã—à–∏"
            return "‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", None, "–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å Data Matrix –∫–æ–¥–æ–º –∫–ª–∏–∫–æ–º –º—ã—à–∏"
        
        if self.scanning:
            return "‚ö†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", None, "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scanning = True
        self.stop_requested = False
        self.scan_results["status"] = "üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ..."
        self.scan_results["progress"] = "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è..."
        
        def scan_thread():
            try:
                all_codes = []
                total_pages = len(self.pdf_document)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if max_pages and max_pages > 0:
                    total_pages = min(total_pages, max_pages)
                
                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–±–ª–∞—Å—Ç—å—é: {self.crop_rect}")
                
                start_time = time.time()
                
                for page_num in range(total_pages):
                    if self.stop_requested:
                        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")
                        break
                    
                    page_start_time = time.time()
                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}/{total_pages}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                    self.scan_results["progress"] = f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{total_pages} | –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    page = self.pdf_document[page_num]
                    
                    # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è Data Matrix
                    mat = fitz.Matrix(3.0, 3.0)  # –£–≤–µ–ª–∏—á–∏–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
                    pix = page.get_pixmap(matrix=mat)
                    logger.debug(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞: {pix.width}x{pix.height}")
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                    img_data = pix.tobytes("png")
                    image = Image.open(io.BytesIO(img_data))
                    logger.debug(f"PIL Image –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {image.size}")
                    
                    # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞)
                    scale = 3.0 / 2.0  # —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –º–∞—Å—à—Ç–∞–±–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–µ–≤—å—é
                    crop_x1 = int(self.crop_rect[0] * scale)
                    crop_y1 = int(self.crop_rect[1] * scale)
                    crop_x2 = int(self.crop_rect[2] * scale)
                    crop_y2 = int(self.crop_rect[3] * scale)
                    
                    logger.debug(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ —Å –º–∞—Å—à—Ç–∞–±–æ–º: ({crop_x1},{crop_y1}) - ({crop_x2},{crop_y2})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    img_width, img_height = image.size
                    if crop_x2 > img_width or crop_y2 > img_height:
                        logger.warning(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_width}x{img_height}")
                        crop_x2 = min(crop_x2, img_width)
                        crop_y2 = min(crop_y2, img_height)
                    
                    cropped_image = image.crop((crop_x1, crop_y1, crop_x2, crop_y2))
                    logger.debug(f"–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {cropped_image.size}")
                    
                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Data Matrix
                    cropped_image = self._optimize_for_datamatrix(cropped_image)
                    
                    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º data matrix –∫–æ–¥—ã
                    try:
                        decode_start = time.time()
                        decoded_objects = decode(cropped_image)
                        decode_time = time.time() - decode_start
                        
                        logger.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1} –Ω–∞–π–¥–µ–Ω–æ {len(decoded_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ {decode_time:.2f}—Å")
                        
                        for i, obj in enumerate(decoded_objects):
                            try:
                                code_data = obj.data.decode('utf-8')
                                all_codes.append(code_data)
                                logger.info(f"–ö–æ–¥ {i+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {code_data}")
                            except UnicodeDecodeError:
                                code_data = obj.data.decode('latin-1')
                                all_codes.append(code_data)
                                logger.info(f"–ö–æ–¥ {i+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1} (latin-1): {code_data}")
                                
                    except Exception as decode_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {decode_error}")
                    
                    page_time = time.time() - page_start_time
                    logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {page_time:.2f}—Å")
                
                total_time = time.time() - start_time
                logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f}—Å. –ù–∞–π–¥–µ–Ω–æ {len(all_codes)} –∫–æ–¥–æ–≤")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª
                if all_codes:
                    try:
                        csv_content = self._generate_csv(all_codes)
                        logger.info(f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(csv_content)} –±–∞–π—Ç")
                        
                        self.scan_results.update({
                            "status": f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f}—Å!\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}\nüíæ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é",
                            "progress": f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {total_pages}/{total_pages} | –ö–æ–¥–æ–≤: {len(all_codes)} | –í—Ä–µ–º—è: {total_time:.1f}—Å",
                            "csv_content": csv_content
                        })
                        
                    except Exception as csv_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV: {csv_error}", exc_info=True)
                        self.scan_results.update({
                            "status": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV: {str(csv_error)}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}",
                            "progress": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
                            "csv_content": None
                        })
                else:
                    logger.warning("–ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.scan_results.update({
                        "status": "‚ö†Ô∏è –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",
                        "progress": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å",
                        "csv_content": None
                    })
                
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)
                self.scan_results.update({
                    "status": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",
                    "progress": "–û—à–∏–±–∫–∞",
                    "csv_content": None
                })
            finally:
                self.scanning = False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        thread = threading.Thread(target=scan_thread, daemon=True)
        thread.start()
        
        return "üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ", None, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ..."
    
    def get_current_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        return self.scan_results["status"], self.scan_results["progress"], self.scan_results["csv_content"]
    
    def _optimize_for_datamatrix(self, image):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Data Matrix"""
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if image.mode != 'L':
                image = image.convert('L')
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
            enhancer = ImageEnhance.Contrast(image)
            image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤ 2 —Ä–∞–∑–∞
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å
            enhancer = ImageEnhance.Sharpness(image)
            image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –≤ 2 —Ä–∞–∑–∞
            
            logger.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Data Matrix")
            return image
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return image
    
    def _generate_csv(self, codes):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è {len(codes)} –∫–æ–¥–æ–≤")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        import tempfile
        temp_file = tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º QUOTE_NONE —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–∞–≤—ã—á–µ–∫
        writer = csv.writer(temp_file, quoting=csv.QUOTE_NONE, escapechar='\\')
        
        for i, code in enumerate(codes):
            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            clean_code = code.strip().replace('\n', '').replace('\r', '')
            writer.writerow([clean_code])
            logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω –∫–æ–¥ {i+1}: {clean_code}")
        
        temp_file.close()
        
        logger.info(f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_file.name}")
        return temp_file.name
    
    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.stop_requested = True
        self.scan_results["status"] = "‚èπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..."
        return "‚èπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞...", None


# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞
scanner = GTINScanner()
logger.info("GTIN Scanner Final –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")


# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio
with gr.Blocks(title="GTIN Scanner Final", theme=gr.themes.Soft()) as app:
    gr.Markdown("""
    # ‚ö° GTIN Scanner Final - –ë—ã—Å—Ç—Ä–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF
    
    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª** –≤ –ø–æ–ª–µ –Ω–∏–∂–µ
    2. **–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å Data Matrix –∫–æ–¥–æ–º** –∫–ª–∏–∫–æ–º –º—ã—à–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    3. **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü** –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)
    4. **–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    5. **–°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV
    
    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - ‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    - ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    - ‚úÖ –§–æ–Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    - ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    """)
    
    with gr.Row():
        with gr.Column(scale=2):
            # –ó–∞–≥—Ä—É–∑–∫–∞ PDF
            pdf_input = gr.File(
                label="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª",
                file_types=[".pdf"],
                type="filepath"
            )
            
            # –ü—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞
            preview_image = gr.Image(
                label="",
                height=600,
                interactive=True
            )
            
            load_status = gr.Textbox(
                label="üìù –°—Ç–∞—Ç—É—Å",
                value="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF...",
                lines=3
            )
        
        with gr.Column(scale=1):
            # –°—Ç–∞—Ç—É—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è
            gr.Markdown("### üéØ –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏")
            
            selection_status = gr.Textbox(
                label="–°—Ç–∞—Ç—É—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è",
                value="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏",
                lines=4
            )
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            gr.Markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            max_pages_input = gr.Number(
                label="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü (0 = –≤—Å–µ)",
                value=50,
                minimum=0,
                maximum=10000,
                step=1
            )
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            gr.Markdown("### ‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")
            
            scan_btn = gr.Button(
                "‚ö° –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",
                variant="primary",
                size="lg"
            )
            
            stop_btn = gr.Button(
                "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                variant="stop",
                size="lg"
            )
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            gr.Markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            
            stats_display = gr.Textbox(
                label="–ü—Ä–æ–≥—Ä–µ—Å—Å",
                value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                lines=2
            )
            
            scan_status = gr.Textbox(
                label="–î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                value="",
                lines=5
            )
            
            # –†–µ–∑—É–ª—å—Ç–∞—Ç
            gr.Markdown("### üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç")
            
            csv_output = gr.File(
                label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                visible=True
            )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    pdf_input.change(
        fn=scanner.load_pdf_preview,
        inputs=[pdf_input],
        outputs=[preview_image, load_status]
    )
    
    preview_image.select(
        fn=scanner.handle_image_click,
        outputs=[selection_status]
    )
    
    scan_btn.click(
        fn=scanner.scan_pdf_with_progress,
        inputs=[max_pages_input],
        outputs=[scan_status, csv_output, stats_display]
    )
    
    stop_btn.click(
        fn=scanner.stop_scan,
        outputs=[scan_status, stats_display, csv_output]
    )
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    refresh_btn = gr.Button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", variant="secondary")
    refresh_btn.click(
        fn=scanner.get_current_status,
        outputs=[scan_status, stats_display, csv_output]
    )
    
    gr.Markdown("""
    ---
    **üí° –ö–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å:**
    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ø—Ä–µ–≤—å—é
    2. –ù–∞–π–¥–∏—Ç–µ Data Matrix –∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    3. **–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫** - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
    4. **–í—Ç–æ—Ä–æ–π –∫–ª–∏–∫** - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)
    5. –û–±–ª–∞—Å—Ç—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
    6. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    7. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    
    **‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∫–æ—Ä–æ—Å—Ç–∏:**
    - –£–≤–µ–ª–∏—á–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (3x)
    - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏ –∏ —Ä–µ–∑–∫–æ—Å—Ç–∏
    - –§–æ–Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    **üîÑ –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:** –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """)


if __name__ == "__main__":
    print("‚ö° –ó–∞–ø—É—Å–∫ GTIN Scanner Final...")
    print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª gtin_scanner_final.log")
    app.launch(
        server_name="127.0.0.1",
        server_port=7860,
        share=False,
        inbrowser=True
    )