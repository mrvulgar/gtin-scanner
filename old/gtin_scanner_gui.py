#!/usr/bin/env python3
"""
GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è GTIN data matrix –∫–æ–¥–æ–≤ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤
"""

import sys
import csv
import threading
from pathlib import Path
from tkinter import Tk, filedialog, messagebox, Canvas, Button, Label, Frame, StringVar, IntVar
from tkinter.ttk import Progressbar
from PIL import Image, ImageTk, ImageDraw
import io

try:
    import fitz  # PyMuPDF
    from pylibdmtx.pylibdmtx import decode
except ImportError as e:
    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")
    print("pip install PyMuPDF pylibdmtx Pillow")
    sys.exit(1)


class GTINScannerApp:
    def __init__(self, root):
        self.root = root
        self.root.title("GTIN Scanner - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF")
        self.root.geometry("900x700")
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.pdf_path = None
        self.pdf_document = None
        self.crop_rect = None
        self.scanning = False
        self.stop_requested = False
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        self.start_x = None
        self.start_y = None
        self.rect_id = None
        self.preview_image = None
        self.preview_photo = None
        self.scale_factor = 1.0
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
    def create_widgets(self):
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
        top_frame = Frame(self.root)
        top_frame.pack(pady=10, padx=10, fill='x')
        
        self.select_btn = Button(top_frame, text="üìÅ –í—ã–±—Ä–∞—Ç—å PDF —Ñ–∞–π–ª", 
                                 command=self.select_pdf, font=('Arial', 12))
        self.select_btn.pack(side='left', padx=5)
        
        self.file_label = Label(top_frame, text="–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω", 
                               font=('Arial', 10), fg='gray')
        self.file_label.pack(side='left', padx=10)
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instruction_frame = Frame(self.root)
        instruction_frame.pack(pady=5)
        
        self.instruction_label = Label(instruction_frame, 
                                      text="1. –í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª\n2. –í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º –Ω–∞ –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n3. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'",
                                      font=('Arial', 10), justify='left', fg='blue')
        self.instruction_label.pack()
        
        # Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—å—é –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        canvas_frame = Frame(self.root)
        canvas_frame.pack(pady=10, fill='both', expand=True)
        
        self.canvas = Canvas(canvas_frame, bg='lightgray', cursor='cross')
        self.canvas.pack(fill='both', expand=True, padx=10)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏
        self.canvas.bind('<ButtonPress-1>', self.on_mouse_down)
        self.canvas.bind('<B1-Motion>', self.on_mouse_drag)
        self.canvas.bind('<ButtonRelease-1>', self.on_mouse_up)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
        self.crop_info_label = Label(self.root, text="–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º", 
                                     font=('Arial', 9), fg='darkgreen')
        self.crop_info_label.pack(pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        control_frame = Frame(self.root)
        control_frame.pack(pady=10)
        
        self.scan_btn = Button(control_frame, text="‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                              command=self.start_scanning, font=('Arial', 12),
                              state='disabled', bg='lightgreen')
        self.scan_btn.pack(side='left', padx=5)
        
        self.stop_btn = Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", 
                              command=self.stop_scanning, font=('Arial', 12),
                              state='disabled', bg='lightcoral')
        self.stop_btn.pack(side='left', padx=5)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        progress_frame = Frame(self.root)
        progress_frame.pack(pady=10, padx=10, fill='x')
        
        self.progress_label = Label(progress_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                   font=('Arial', 10))
        self.progress_label.pack()
        
        self.progress_bar = Progressbar(progress_frame, length=800, mode='determinate')
        self.progress_bar.pack(pady=5)
        
        self.stats_label = Label(progress_frame, 
                                text="–°—Ç—Ä–∞–Ω–∏—Ü: 0/0 | –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: 0", 
                                font=('Arial', 10), fg='blue')
        self.stats_label.pack(pady=5)
        
    def select_pdf(self):
        """–í—ã–±–æ—Ä PDF —Ñ–∞–π–ª–∞"""
        file_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª",
            filetypes=[("PDF files", "*.pdf"), ("All files", "*.*")]
        )
        
        if file_path:
            self.pdf_path = file_path
            self.file_label.config(text=Path(file_path).name, fg='black')
            self.load_preview()
            
    def load_preview(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–≤—å—é –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        try:
            self.pdf_document = fitz.open(self.pdf_path)
            page = self.pdf_document[0]
            
            # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            mat = fitz.Matrix(2.0, 2.0)
            pix = page.get_pixmap(matrix=mat)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
            img_data = pix.tobytes("png")
            self.preview_image = Image.open(io.BytesIO(img_data))
            
            # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ canvas
            canvas_width = self.canvas.winfo_width()
            canvas_height = self.canvas.winfo_height()
            
            # –ï—Å–ª–∏ canvas –µ—â–µ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if canvas_width <= 1:
                canvas_width = 800
                canvas_height = 600
            
            img_width, img_height = self.preview_image.size
            
            # –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–ø–∏—Å—ã–≤–∞–Ω–∏—è –≤ canvas
            scale_x = (canvas_width - 20) / img_width
            scale_y = (canvas_height - 20) / img_height
            self.scale_factor = min(scale_x, scale_y, 1.0)
            
            new_width = int(img_width * self.scale_factor)
            new_height = int(img_height * self.scale_factor)
            
            resized_image = self.preview_image.resize((new_width, new_height), Image.Resampling.LANCZOS)
            self.preview_photo = ImageTk.PhotoImage(resized_image)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–∞ canvas
            self.canvas.delete('all')
            self.canvas.create_image(10, 10, anchor='nw', image=self.preview_photo)
            
            self.instruction_label.config(
                text=f"PDF –∑–∞–≥—Ä—É–∂–µ–Ω ({len(self.pdf_document)} —Å—Ç—Ä.). –í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º –º—ã—à—å—é."
            )
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF:\n{str(e)}")
            
    def on_mouse_down(self, event):
        """–ù–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        if self.preview_image and not self.scanning:
            self.start_x = event.x
            self.start_y = event.y
            
    def on_mouse_drag(self, event):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–∏"""
        if self.start_x and self.start_y and not self.scanning:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            if self.rect_id:
                self.canvas.delete(self.rect_id)
            
            # –†–∏—Å—É–µ–º –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            self.rect_id = self.canvas.create_rectangle(
                self.start_x, self.start_y, event.x, event.y,
                outline='red', width=2
            )
            
    def on_mouse_up(self, event):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏"""
        if self.start_x and self.start_y and not self.scanning:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            x1 = min(self.start_x, event.x) - 10  # -10 –∏–∑-–∑–∞ —Å–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            y1 = min(self.start_y, event.y) - 10
            x2 = max(self.start_x, event.x) - 10
            y2 = max(self.start_y, event.y) - 10
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –∫ –º–∞—Å—à—Ç–∞–±—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            orig_x1 = int(x1 / self.scale_factor)
            orig_y1 = int(y1 / self.scale_factor)
            orig_x2 = int(x2 / self.scale_factor)
            orig_y2 = int(y2 / self.scale_factor)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
            if orig_x2 > orig_x1 and orig_y2 > orig_y1:
                self.crop_rect = (orig_x1, orig_y1, orig_x2, orig_y2)
                width = orig_x2 - orig_x1
                height = orig_y2 - orig_y1
                self.crop_info_label.config(
                    text=f"–û–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {width}x{height} px (–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏)"
                )
                self.scan_btn.config(state='normal')
            else:
                self.crop_rect = None
                self.crop_info_label.config(text="–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º")
                self.scan_btn.config(state='disabled')
                
    def start_scanning(self):
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if not self.crop_rect:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –≤—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å QR –∫–æ–¥–æ–º")
            return
        
        self.scanning = True
        self.stop_requested = False
        self.scan_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
        self.select_btn.config(state='disabled')
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self.scan_pdf, daemon=True)
        thread.start()
        
    def stop_scanning(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.stop_requested = True
        self.progress_label.config(text="–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
        self.stop_btn.config(state='disabled')
        
    def scan_pdf(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞"""
        all_codes = []
        total_pages = len(self.pdf_document)
        
        try:
            for page_num in range(total_pages):
                if self.stop_requested:
                    self.root.after(0, lambda: self.progress_label.config(
                        text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
                    ))
                    break
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = ((page_num + 1) / total_pages) * 100
                self.root.after(0, lambda p=progress, pn=page_num+1, tp=total_pages, fc=len(all_codes): 
                    self.update_progress(p, pn, tp, fc))
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                page = self.pdf_document[page_num]
                
                # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
                mat = fitz.Matrix(2.5, 2.5)
                pix = page.get_pixmap(matrix=mat)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image
                img_data = pix.tobytes("png")
                image = Image.open(io.BytesIO(img_data))
                
                # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞)
                scale = 2.5  # –¢–æ—Ç –∂–µ –º–∞—Å—à—Ç–∞–±, —á—Ç–æ –∏ –ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–µ
                crop_x1 = int(self.crop_rect[0] * scale)
                crop_y1 = int(self.crop_rect[1] * scale)
                crop_x2 = int(self.crop_rect[2] * scale)
                crop_y2 = int(self.crop_rect[3] * scale)
                
                cropped_image = image.crop((crop_x1, crop_y1, crop_x2, crop_y2))
                
                # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º data matrix –∫–æ–¥—ã
                decoded_objects = decode(cropped_image)
                
                for obj in decoded_objects:
                    try:
                        code_data = obj.data.decode('utf-8')
                        all_codes.append(code_data)
                    except UnicodeDecodeError:
                        code_data = obj.data.decode('latin-1')
                        all_codes.append(code_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if not self.stop_requested:
                self.save_results(all_codes)
            
        except Exception as e:
            self.root.after(0, lambda: messagebox.showerror(
                "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{str(e)}"
            ))
        finally:
            self.scanning = False
            self.root.after(0, self.reset_ui)
            
    def update_progress(self, progress, current_page, total_pages, found_codes):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.progress_bar['value'] = progress
        self.progress_label.config(
            text=f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {current_page} –∏–∑ {total_pages} ({progress:.1f}%)"
        )
        self.stats_label.config(
            text=f"–°—Ç—Ä–∞–Ω–∏—Ü: {current_page}/{total_pages} | –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {found_codes}"
        )
        
    def save_results(self, codes):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ CSV"""
        if not codes:
            messagebox.showinfo("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏")
            return
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –º–µ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        output_path = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
            defaultextension=".csv",
            initialfile=f"{Path(self.pdf_path).stem}_extracted.csv",
            filetypes=[("CSV files", "*.csv"), ("All files", "*.*")]
        )
        
        if output_path:
            try:
                with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                    writer = csv.writer(csvfile, quoting=csv.QUOTE_MINIMAL)
                    for code in codes:
                        writer.writerow([code])
                
                messagebox.showinfo(
                    "–£—Å–ø–µ—à–Ω–æ", 
                    f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(codes)} –∫–æ–¥–æ–≤ –≤ —Ñ–∞–π–ª:\n{output_path}"
                )
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{str(e)}")
                
    def reset_ui(self):
        """–°–±—Ä–æ—Å UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.select_btn.config(state='normal')
        self.progress_bar['value'] = 0
        
        if not self.stop_requested:
            self.progress_label.config(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


def main():
    root = Tk()
    app = GTINScannerApp(root)
    root.mainloop()


if __name__ == "__main__":
    main()

