#!/usr/bin/env python3\n"""\n–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF —Ñ–∞–π–ª–æ–≤ —Å –∂–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º\n"""\n\nimport sys\nimport csv\nimport io\nimport time\nimport threading\nimport logging\nimport re\nfrom pathlib import Path\nfrom typing import Optional, Tuple\nimport queue\n\n# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s',\n    handlers=[\n        logging.FileHandler('gtin_scanner_live.log'),\n        logging.StreamHandler(sys.stdout)\n    ]\n)\nlogger = logging.getLogger(__name__)\n\n# –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Python 3.12+: –º–æ–¥—É–ª—è distutils –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ\ntry:\n    import distutils  # type: ignore\nexcept Exception:\n    try:\n        import setuptools._distutils as _distutils  # type: ignore\n        sys.modules['distutils'] = _distutils\n        logger.info("–í–∫–ª—é—á–µ–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å distutils —á–µ—Ä–µ–∑ setuptools._distutils")\n    except Exception as _e:\n        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å distutils: {_e}")\n\ntry:\n    import gradio as gr\n    import fitz  # PyMuPDF\n    from pylibdmtx.pylibdmtx import decode\n    from PIL import Image, ImageDraw, ImageEnhance\n    import numpy as np\nexcept ImportError as e:\n    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")\n    print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")\n    print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏:")\n    print("pip install gradio PyMuPDF pylibdmtx Pillow")\n    sys.exit(1)\n\n\nclass GTINScanner:\n    def __init__(self):\n        self.pdf_document = None\n        self.pdf_path = None\n        self.crop_rect = None\n        self.stop_requested = False\n        self.preview_image = None\n        self.selection_start = None\n        self.selection_end = None\n        self.scanning = False\n        \n        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞\n        self.progress_queue = queue.Queue()\n        self.current_progress = {\n            "status": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",\n            "current_page": 0,\n            "total_pages": 0,\n            "found_codes": 0,\n            "elapsed_time": 0,\n            "current_page_content": "",\n            "csv_file": None\n        }\n        \n        logger.info("GTINScanner Live –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")\n        \n    def load_pdf_preview(self, pdf_file):\n        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã PDF –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–∞—Å—Ç–∏"""\n        logger.info(f"load_pdf_preview –≤—ã–∑–≤–∞–Ω–∞ —Å —Ñ–∞–π–ª–æ–º: {pdf_file}")\n        \n        if pdf_file is None:\n            logger.warning("PDF —Ñ–∞–π–ª –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω")\n            return None, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"\n        \n        try:\n            self.pdf_path = pdf_file.name\n            logger.info(f"–û—Ç–∫—Ä—ã–≤–∞–µ–º PDF: {self.pdf_path}")\n            \n            self.pdf_document = fitz.open(self.pdf_path)\n            page = self.pdf_document[0]\n            logger.info(f"–ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")\n            \n            # –†–µ–Ω–¥–µ—Ä–∏–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è –ø—Ä–µ–≤—å—é\n            mat = fitz.Matrix(2.0, 2.0)\n            pix = page.get_pixmap(matrix=mat)\n            logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞: {pix.width}x{pix.height}")\n            \n            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image\n            img_data = pix.tobytes("png")\n            self.preview_image = Image.open(io.BytesIO(img_data))\n            logger.info(f"PIL Image —Å–æ–∑–¥–∞–Ω: {self.preview_image.size}")\n            \n            total_pages = len(self.pdf_document)\n            message = f"‚úÖ PDF –∑–∞–≥—Ä—É–∂–µ–Ω: {Path(self.pdf_path).name}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü: {total_pages}\n\n‚ö†Ô∏è –î–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø–µ—Ä–≤—ã—Ö 10-50 —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö\nüñ±Ô∏è –ö–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã—à–µ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏ —Å Data Matrix –∫–æ–¥–æ–º"\n            \n            logger.info(f"PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü")\n            return self.preview_image, message\n            \n        except Exception as e:\n            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}", exc_info=True)\n            return None, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ PDF: {str(e)}"\n    \n    def handle_image_click(self, evt: gr.SelectData):\n        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"""\n        logger.info(f"handle_image_click –≤—ã–∑–≤–∞–Ω–∞ —Å –¥–∞–Ω–Ω—ã–º–∏: {evt}")\n        \n        if self.preview_image is None:\n            logger.warning("–ü—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")\n            return "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª"\n        \n        x, y = evt.index[0], evt.index[1]\n        logger.info(f"–ö–ª–∏–∫ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º: ({x}, {y})")\n        \n        if self.selection_start is None:\n            # –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫ - –Ω–∞—á–∞–ª–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è\n            self.selection_start = (x, y)\n            logger.info(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.selection_start}")\n            return f"üìç –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ({x}, {y})\nüñ±Ô∏è –ù–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ"\n        else:\n            # –í—Ç–æ—Ä–æ–π –∫–ª–∏–∫ - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è\n            self.selection_end = (x, y)\n            logger.info(f"–ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.selection_end}")\n            \n            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞\n            x1 = min(self.selection_start[0], self.selection_end[0])\n            y1 = min(self.selection_start[1], self.selection_end[1])\n            x2 = max(self.selection_start[0], self.selection_end[0])\n            y2 = max(self.selection_start[1], self.selection_end[1])\n            \n            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã\n            self.crop_rect = (x1, y1, x2, y2)\n            logger.info(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {self.crop_rect}")\n            \n            width = x2 - x1\n            height = y2 - y1\n            \n            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞\n            self.selection_start = None\n            self.selection_end = None\n            \n            result_msg = f"‚úÖ –û–±–ª–∞—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {width}x{height} px\nüìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({x1},{y1}) - ({x2},{y2})\n\n‚ñ∂Ô∏è –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'"\n            logger.info(f"–û–±–ª–∞—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω–∞: {width}x{height}")\n            return result_msg\n    \n    def scan_pdf_with_live_progress(self, max_pages=None):\n        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ PDF —Å –∂–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""\n        logger.info("scan_pdf_with_live_progress –Ω–∞—á–∞—Ç–æ")\n        \n        if self.pdf_document is None:\n            logger.warning("PDF –¥–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")\n            self.current_progress["status"] = "‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"\n            return "‚ùå PDF —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω", None, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª", gr.update(value=0)\n        \n        if self.crop_rect is None:\n            logger.warning("–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")\n            self.current_progress["status"] = "‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"\n            return "‚ùå –û–±–ª–∞—Å—Ç—å –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", None, "–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å Data Matrix –∫–æ–¥–æ–º –∫–ª–∏–∫–æ–º –º—ã—à–∏", gr.update(value=0)\n        \n        if self.scanning:\n            return "‚ö†Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", None, "–î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", gr.update(value=0)\n        \n        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ\n        self.scanning = True\n        self.stop_requested = False\n        \n        def scan_thread():\n            try:\n                all_codes = []\n                total_pages = len(self.pdf_document)\n                \n                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n                if max_pages and max_pages > 0:\n                    total_pages = min(total_pages, max_pages)\n                \n                logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü —Å –æ–±–ª–∞—Å—Ç—å—é: {self.crop_rect}")\n                \n                start_time = time.time()\n                \n                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å\n                self.current_progress.update({\n                    "status": "üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ...",\n                    "current_page": 0,\n                    "total_pages": total_pages,\n                    "found_codes": 0,\n                    "elapsed_time": 0,\n                    "current_page_content": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",\n                    "csv_file": None\n                })\n                \n                for page_num in range(total_pages):\n                    if self.stop_requested:\n                        logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num}")\n                        break\n                    \n                    page_start_time = time.time()\n                    logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num + 1}/{total_pages}")\n                    \n                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å\n                    elapsed_time = time.time() - start_time\n                    self.current_progress.update({\n                        "status": f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}/{total_pages}",\n                        "current_page": page_num + 1,\n                        "found_codes": len(all_codes),\n                        "elapsed_time": elapsed_time,\n                        "current_page_content": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –æ–±—Ä–∞–±–æ—Ç–∫–∞..."\n                    })\n                    \n                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É\n                    page = self.pdf_document[page_num]\n                    \n                    # –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ú —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –¥–ª—è Data Matrix\n                    mat = fitz.Matrix(3.0, 3.0)\n                    pix = page.get_pixmap(matrix=mat)\n                    logger.debug(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–∞: {pix.width}x{pix.height}")\n                    \n                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PIL Image\n                    img_data = pix.tobytes("png")\n                    image = Image.open(io.BytesIO(img_data))\n                    logger.debug(f"PIL Image –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num + 1}: {image.size}")\n                    \n                    # –û–±—Ä–µ–∑–∞–µ–º –ø–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (—Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞)\n                    scale = 3.0 / 2.0\n                    crop_x1 = int(self.crop_rect[0] * scale)\n                    crop_y1 = int(self.crop_rect[1] * scale)\n                    crop_x2 = int(self.crop_rect[2] * scale)\n                    crop_y2 = int(self.crop_rect[3] * scale)\n                    \n                    logger.debug(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ —Å –º–∞—Å—à—Ç–∞–±–æ–º: ({crop_x1},{crop_y1}) - ({crop_x2},{crop_y2})")\n                    \n                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n                    img_width, img_height = image.size\n                    if crop_x2 > img_width or crop_y2 > img_height:\n                        logger.warning(f"–û–±–ª–∞—Å—Ç—å –æ–±—Ä–µ–∑–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_width}x{img_height}")\n                        crop_x2 = min(crop_x2, img_width)\n                        crop_y2 = min(crop_y2, img_height)\n                    \n                    cropped_image = image.crop((crop_x1, crop_y1, crop_x2, crop_y2))\n                    logger.debug(f"–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {cropped_image.size}")\n                    \n                    # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Data Matrix\n                    cropped_image = self._optimize_for_datamatrix(cropped_image)\n                    \n                    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º data matrix –∫–æ–¥—ã\n                    page_codes = []\n                    try:\n                        decode_start = time.time()\n                        decoded_objects = decode(cropped_image)\n                        decode_time = time.time() - decode_start\n                        \n                        logger.info(f"–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1} –Ω–∞–π–¥–µ–Ω–æ {len(decoded_objects)} –æ–±—ä–µ–∫—Ç–æ–≤ –∑–∞ {decode_time:.2f}—Å")\n                        \n                        for i, obj in enumerate(decoded_objects):\n                            try:\n                                code_data = obj.data.decode('utf-8')\n                                clean_code = self._normalize_code(code_data)\n                                page_codes.append(clean_code)\n                                all_codes.append(clean_code)\n                                logger.info(f"–ö–æ–¥ {i+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {clean_code}")\n                            except UnicodeDecodeError:\n                                code_data = obj.data.decode('latin-1')\n                                clean_code = self._normalize_code(code_data)\n                                page_codes.append(clean_code)\n                                all_codes.append(clean_code)\n                                logger.info(f"–ö–æ–¥ {i+1} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1} (latin-1): {clean_code}")\n                                \n                    except Exception as decode_error:\n                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page_num + 1}: {decode_error}")\n                    \n                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n                    page_time = time.time() - page_start_time\n                    elapsed_time = time.time() - start_time\n                    \n                    if page_codes:\n                        self.current_progress.update({\n                            "status": f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{total_pages} - –Ω–∞–π–¥–µ–Ω–æ {len(page_codes)} –∫–æ–¥–æ–≤",\n                            "found_codes": len(all_codes),\n                            "elapsed_time": elapsed_time,\n                            "current_page_content": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: {', '.join(page_codes[:3])}{'...' if len(page_codes) > 3 else ''}"\n                        })\n                    else:\n                        self.current_progress.update({\n                            "status": f"‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}/{total_pages} - –∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",\n                            "elapsed_time": elapsed_time,\n                            "current_page_content": f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1}: –∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"\n                        })\n                    \n                    logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∑–∞ {page_time:.2f}—Å")\n                \n                total_time = time.time() - start_time\n                logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.2f}—Å. –ù–∞–π–¥–µ–Ω–æ {len(all_codes)} –∫–æ–¥–æ–≤")\n                \n                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV —Ñ–∞–π–ª\n                if all_codes:\n                    try:\n                        csv_file = self._generate_csv(all_codes)\n                        logger.info(f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {csv_file}")\n                        \n                        self.current_progress.update({\n                            "status": f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {total_time:.1f}—Å!\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}\nüíæ –§–∞–π–ª –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é",\n                            "csv_file": csv_file,\n                            "current_page_content": f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(all_codes)} –∫–æ–¥–æ–≤ –∑–∞ {total_time:.1f}—Å"\n                        })\n                        \n                    except Exception as csv_error:\n                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV: {csv_error}", exc_info=True)\n                        self.current_progress.update({\n                            "status": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ CSV: {str(csv_error)}\nüìÑ –°—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_pages}\n‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–¥–æ–≤: {len(all_codes)}",\n                            "current_page_content": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"\n                        })\n                else:\n                    logger.warning("–ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")\n                    self.current_progress.update({\n                        "status": "‚ö†Ô∏è –ö–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏",\n                        "current_page_content": "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å"\n                    })\n                \n            except Exception as e:\n                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", exc_info=True)\n                self.current_progress.update({\n                    "status": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}",\n                    "current_page_content": "–û—à–∏–±–∫–∞"\n                })\n            finally:\n                self.scanning = False\n        \n        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫\n        thread = threading.Thread(target=scan_thread, daemon=True)\n        thread.start()\n        \n        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n        return "üîÑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ", None, "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ..."\n    \n    def get_live_progress(self):\n        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""\n        if self.scanning:\n            status_text = self.current_progress["status"]\n            stats_text = f"–°—Ç—Ä–∞–Ω–∏—Ü: {self.current_progress['current_page']}/{self.current_progress['total_pages']} | –ö–æ–¥–æ–≤: {self.current_progress['found_codes']} | –í—Ä–µ–º—è: {self.current_progress['elapsed_time']:.1f}—Å"\n            \n            return status_text, stats_text, self.current_progress["current_page_content"], self.current_progress["csv_file"]\n        else:\n            return self.current_progress["status"], "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", self.current_progress["csv_file"]\n    \n    def _optimize_for_datamatrix(self, image):\n        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è Data Matrix"""\n        try:\n            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –µ—Å–ª–∏ –Ω—É–∂–Ω–æ\n            if image.mode != 'L':\n                image = image.convert('L')\n            \n            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å\n            enhancer = ImageEnhance.Contrast(image)\n            image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –≤ 2 —Ä–∞–∑–∞\n            \n            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å\n            enhancer = ImageEnhance.Sharpness(image)\n            image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑–∫–æ—Å—Ç—å –≤ 2 —Ä–∞–∑–∞\n            \n            logger.debug("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è Data Matrix")\n            return image\n            \n        except Exception as e:\n            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")\n            return image\n    \n\n\n    ESCAPE_RE = re.compile(\n        r"""\(\n            x[0-9A-Fa-f]{2} |\n            u[0-9A-Fa-f]{4} |\n            U[0-9A-Fa-f]{8} |\n            ["'\\/bfnrt]\n        )\n        """,\n        re.VERBOSE,\n    )\n\n    def _normalize_code(self, s: str) -> str:\n        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""\n        s = s.replace("\n", "").replace("\n", "")\n\n        translation = str.maketrans({\n            "‚Äú": '"',\n            "‚Äù": '"',\n            "‚Äû": '"',\n            "‚Äü": '"',\n            "‚Äò": "'",\n            "‚Äô": "'",\n            "‚Äö": "'",\n            "‚Äõ": "'",\n        })\n        s = s.translate(translation)\n\n        def _unescape(match: re.Match[str]) -> str:\n            token = match.group(1)\n            simple = {\n                '"': '"',\n                "'": "'",\n                '\': '\',\n                '/': '/',\n                'n': '',\n                'r': '',\n                't': ' ',\n                'b': '',\n                'f': '',\n            }\n            if token in simple:\n                return simple[token]\n            if token.startswith('x'):\n                return chr(int(token[1:], 16))\n            if token.startswith(('u', 'U')):\n                return chr(int(token[1:], 16))\n            return match.group(0)\n\n        s = self.ESCAPE_RE.sub(_unescape, s)\n        s = s.replace("", "")\n        s = "".join(ch for ch in s if ord(ch) >= 32 or ch == "")\n        return s\n    \n    def _generate_csv(self, codes):\n        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""\n        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–ª—è {len(codes)} –∫–æ–¥–æ–≤")\n        \n        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª\n        import tempfile\n        temp_file = tempfile.NamedTemporaryFile(mode='w', newline='', suffix='.csv', delete=False, encoding='utf-8')\n        \n        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ quoting, —á—Ç–æ–±—ã –∫–∞–≤—ã—á–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n        writer = csv.writer(temp_file, quoting=csv.QUOTE_MINIMAL, lineterminator='\n')\n        \n        for i, code in enumerate(codes):\n            clean_code = self._normalize_code(code)\n            writer.writerow([clean_code])\n            logger.debug(f"–ó–∞–ø–∏—Å–∞–Ω –∫–æ–¥ {i+1}: {clean_code}")\n        \n        temp_file.close()\n        \n        logger.info(f"CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_file.name}")\n        return temp_file.name\n    \n    def stop_scan(self):\n        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""\n        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")\n        self.stop_requested = True\n        self.current_progress["status"] = "‚èπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω..."\n        return "‚èπ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω...", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞...", "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...", None\n\n\n# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∫–∞–Ω–µ—Ä–∞\nscanner = GTINScanner()\nlogger.info("GTIN Scanner Live –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")\n\n\n# –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Gradio\nwith gr.Blocks(title="GTIN Scanner Live", theme=gr.themes.Soft()) as app:\n    gr.Markdown("""\n    # ‚ö° GTIN Scanner Live - —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Data Matrix –∫–æ–¥–æ–≤ –∏–∑ PDF\n    \n    ### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n    1. **–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª** –≤ –ø–æ–ª–µ –Ω–∏–∂–µ\n    2. **–í—ã–¥–µ–ª–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å —Å Data Matrix –∫–æ–¥–æ–º** –∫–ª–∏–∫–æ–º –º—ã—à–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –ø–µ—Ä–≤—ã–π –∫–ª–∏–µ–∫ –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª, –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π.\n    3. **–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü** –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤)\n    4. **–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"** –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü\n    5. **–°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç** –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV\n    \n    ### –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n    - ‚úÖ –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤\n    - ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü\n    - ‚úÖ –§–æ–Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n    - ‚úÖ –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n    """)\n    \n    with gr.Row():\n        with gr.Column(scale=2):\n            # –ó–∞–≥—Ä—É–∑–∫–∞ PDF\n            pdf_input = gr.File(\n                label="üìÅ –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª",\n                file_types=[".pdf"],\n                type="filepath"\n            )\n            \n            # –ü—Ä–µ–≤—å—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–ª–∏–∫–∞\n            preview_image = gr.Image(\n                label="",\n                height=600,\n                interactive=True\n            )\n            \n            load_status = gr.Textbox(\n                label="üìù –°—Ç–∞—Ç—É—Å",\n                value="–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF...",\n                lines=3\n            )\n        \n        with gr.Column(scale=1):\n            # –°—Ç–∞—Ç—É—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è\n            gr.Markdown("### üéØ –í—ã–¥–µ–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏")\n            \n            selection_status = gr.Textbox(\n                label="–°—Ç–∞—Ç—É—Å –≤—ã–¥–µ–ª–µ–Ω–∏—è",\n                value="–ö–ª–∏–∫–Ω–∏—Ç–µ –¥–≤–∞–∂–¥—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±–ª–∞—Å—Ç–∏",\n                lines=4\n            )\n            \n            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n            gr.Markdown("### ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")\n            \n            max_pages_input = gr.Number(\n                label="–ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü (0 = –≤—Å–µ)",\n                value=50,\n                minimum=0,\n                maximum=10000,\n                step=1\n            )\n            \n            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º\n            gr.Markdown("### ‚ñ∂Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º")\n            \n            scan_btn = gr.Button(\n                "‚ö° –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ",\n                variant="primary",\n                size="lg"\n            )\n            \n            stop_btn = gr.Button(\n                "‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",\n                variant="stop",\n                size="lg"\n            )\n            \n            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n            gr.Markdown("### üìä –ñ–∏–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")\n            \n            stats_display = gr.Textbox(\n                label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",\n                value="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",\n                lines=2\n            )\n            \n            scan_status = gr.Textbox(\n                label="–î–µ—Ç–∞–ª–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",\n                value="",\n                lines=3\n            )\n            \n            current_page_display = gr.Textbox(\n                label="–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",\n                value="",\n                lines=2\n            )\n            \n            # –†–µ–∑—É–ª—å—Ç–∞—Ç\n            gr.Markdown("### üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç")\n            \n            csv_output = gr.File(\n                label="–°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",\n                visible=True\n            )\n    \n    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π\n    pdf_input.change(\n        fn=scanner.load_pdf_preview,\n        inputs=[pdf_input],\n        outputs=[preview_image, load_status]\n    )\n    \n    preview_image.select(\n        fn=scanner.handle_image_click,\n        outputs=[selection_status]\n    )\n    \n    scan_btn.click(\n        fn=scanner.scan_pdf_with_live_progress,\n        inputs=[max_pages_input],\n        outputs=[scan_status, csv_output, stats_display]\n    )\n    \n    stop_btn.click(\n        fn=scanner.stop_scan,\n        outputs=[scan_status, stats_display, current_page_display, csv_output]\n    )\n    \n    # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã\n    timer = gr.Timer(value=2)\n    timer.tick(\n        fn=scanner.get_live_progress,\n        outputs=[scan_status, stats_display, current_page_display, csv_output]\n    )\n    \n    gr.Markdown("""\n    ---\n    **üí° –ö–∞–∫ –≤—ã–¥–µ–ª–∏—Ç—å –æ–±–ª–∞—Å—Ç—å:**\n    1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –ø—Ä–µ–≤—å—é\n    2. –ù–∞–π–¥–∏—Ç–µ Data Matrix –∫–æ–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏\n    3. **–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫** - –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)\n    4. **–í—Ç–æ—Ä–æ–π –∫–ª–∏–∫** - –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ (–ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª)\n    5. –û–±–ª–∞—Å—Ç—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º–µ–∂–¥—É —ç—Ç–∏–º–∏ —Ç–æ—á–∫–∞–º–∏\n    6. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è\n    7. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n    \n    **‚ö° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Live –≤–µ—Ä—Å–∏–∏:**\n    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã\n    - –ü–æ–∫–∞–∑ —Ç–µ–∫—É—â–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n    - –ñ–∏–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏\n    - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n    \n    **üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** - –Ω–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫–∏!\n    """)\n\n\nif __name__ == "__main__":\n    print("‚ö° –ó–∞–ø—É—Å–∫ GTIN Scanner Live...")\n    print("üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ")\n    print("üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Ñ–∞–π–ª gtin_scanner_live.log")\n    app.launch(\n        server_name="127.0.0.1",\n        server_port=7860,\n        share=False,\n        inbrowser=True\n    )\n